<?php

namespace App\Providers;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Exception;

class MapboxService
{
    protected $mapboxToken;

    public function __construct()
    {
        $this->mapboxToken = "pk.eyJ1IjoiZGlubmljaGVydGwiLCJhIjoiY20zaGZ4dmc5MGJjdzJrcXpvcTU2ajg5ZiJ9.gfuUn87ezzfPm-hxtEDotw";
    }

    // Fonction pour g√©ocoder une adresse en coordonn√©es (latitude, longitude)
    public function geocodeAddress($address)
    {
        $url = "https://api.mapbox.com/geocoding/v5/mapbox.places/" . urlencode($address) . ".json";

        try {
            Log::info("üìç Envoi de la requ√™te Mapbox Geocoding pour : $address");

            $response = Http::withoutVerifying()
                ->timeout(30)
                ->get($url, [
                    'access_token' => $this->mapboxToken,
                    'limit' => 1
                ]);

            Log::info("üîÑ R√©ponse re√ßue de Mapbox : HTTP " . $response->status());

            if ($response->successful()) {
                $data = $response->json();
                Log::info("‚úÖ R√©ponse JSON : " . json_encode($data));

                if (isset($data['features'][0]['center'])) {
                    return $data['features'][0]['center']; // [longitude, latitude]
                } else {
                    Log::warning("‚ö†Ô∏è Aucune coordonn√©e trouv√©e pour l'adresse : $address");
                }
            } else {
                Log::error("‚ùå Erreur Mapbox Geocoding API : " . $response->body());
            }
        } catch (Exception $e) {
            Log::error("üí• Exception dans geocodeAddress : " . $e->getMessage());
        }

        return null;
    }

    // Fonction pour calculer l'itin√©raire entre deux coordonn√©es
    public function getRoute($startCoordinates, $endCoordinates)
    {
        $url = "https://api.mapbox.com/directions/v5/mapbox/driving/{$startCoordinates[0]},{$startCoordinates[1]};{$endCoordinates[0]},{$endCoordinates[1]}";

        try {
            Log::info("üöó Calcul de l'itin√©raire entre " . json_encode($startCoordinates) . " et " . json_encode($endCoordinates));

            $response = Http::withoutVerifying()
                ->timeout(30)
                ->get($url, [
                    'access_token' => $this->mapboxToken,
                    'geometries' => 'geojson'
                ]);

            Log::info("üîÑ R√©ponse re√ßue de Mapbox Directions : HTTP " . $response->status());

            if ($response->successful()) {
                $data = $response->json();
                Log::info("‚úÖ R√©ponse JSON : " . json_encode($data));

                if (!empty($data['routes'])) {
                    $route = $data['routes'][0];
                    return [
                        'distance_km' => round($route['distance'] / 1000, 2), // Distance en kilom√®tres
                        'duration_minutes' => round($route['duration'] / 60, 2) // Dur√©e en minutes
                    ];
                } else {
                    Log::warning("‚ö†Ô∏è Aucune route trouv√©e pour les coordonn√©es donn√©es.");
                }
            } else {
                Log::error("‚ùå Erreur Mapbox Directions API : " . $response->body());
            }
        } catch (Exception $e) {
            Log::error("üí• Exception dans getRoute : " . $e->getMessage());
        }

        return null;
    }

    // Fonction pour obtenir la distance et le temps de trajet entre deux adresses
    public function calculateRouteBetweenAddresses($startAddress, $endAddress)
    {
        Log::info("üìå D√©but du calcul d'itin√©raire entre : $startAddress et $endAddress");

        $startCoordinates = $this->geocodeAddress($startAddress);
        $endCoordinates = $this->geocodeAddress($endAddress);

        if ($startCoordinates && $endCoordinates) {
            Log::info("‚úÖ Coordonn√©es obtenues : D√©part -> " . json_encode($startCoordinates) . " | Arriv√©e -> " . json_encode($endCoordinates));
            return $this->getRoute($startCoordinates, $endCoordinates);
        }

        Log::error("‚ùå Impossible de calculer l'itin√©raire : coordonn√©es manquantes.");
        return null;
    }
}
